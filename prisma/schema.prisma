// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tournament {
  id        String      @id @default(cuid())
  name      String
  fee       Int
  createdAt DateTime    @default(now())
  rounds    TeamRound[]
  fixtures  fixtures[]
}

model fixtures {
  id           String     @id @default(cuid())
  tournamentId String
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  teams        Team[]
  createdAt    DateTime   @default(now())
}

model Round {
  id        String   @id @default(cuid())
  number    Int // round number
  createdAt DateTime @default(now())

  // Relations
  teams TeamRound[]
}

model TeamRound {
  id      String @id @default(cuid())
  teamId  String
  roundId String

  team  Team  @relation(fields: [teamId], references: [id])
  round Round @relation(fields: [roundId], references: [id])

  createdAt    DateTime    @default(now())
  Tournament   Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId String?

  @@unique([teamId, roundId]) // ensure each team-round pair is unique
}

model Player {
  id              String            @id @default(cuid())
  name            String
  balance         Int
  category        Category          @default(NOOB)
  createdAt       DateTime          @default(now())
  team            Team?             @relation(fields: [teamId], references: [id])
  teamId          String?
  playerStats     PlayerStats[]
  playerTeamStats PlayerTeamStats[]
}

model Team {
  id              String            @id @default(cuid())
  name            String
  players         Player[]
  createdAt       DateTime          @default(now())
  TeamStats       TeamStats[]
  playerTeamStats PlayerTeamStats[]
  TeamRound       TeamRound[]
  fixtures        fixtures?         @relation(fields: [fixturesId], references: [id])
  fixturesId      String?
}

model TeamStats {
  id              String            @id @default(cuid())
  teamId          String            @unique
  team            Team              @relation(fields: [teamId], references: [id])
  kills           Int
  deaths          Int
  kd              Float
  createdAt       DateTime          @default(now())
  playerTeamStats PlayerTeamStats[]
}

model KDStats {
  id       String @id @default(cuid())
  playerId String @unique
  kd       Float
}

model PlayerTeamStats {
  id       String @id @default(cuid())
  playerId String
  teamId   String

  kills  Int
  deaths Int
  kd     Float

  createdAt DateTime @default(now())

  // Relations
  player      Player     @relation(fields: [playerId], references: [id])
  team        Team       @relation(fields: [teamId], references: [id])
  TeamStats   TeamStats? @relation(fields: [teamStatsId], references: [id])
  teamStatsId String?

  @@unique([playerId, teamId]) // ensures one record per player per team
}

model PlayerStats {
  id        String   @id @default(cuid())
  playerId  String   @unique
  player    Player   @relation(fields: [playerId], references: [id])
  matches   Int
  wins      Int
  deaths    Int
  kills     Int
  kd        Float
  createdAt DateTime @default(now())
}

// ==================== ENUMS ====================

// Category enum
enum Category {
  NOOB
  PRO
  ULTRA_NOOB
}
